前情回顾

1. 自定义线程类

   * 继承Thread
   * 重写__init__和run

2. 同步互斥方法

   * 目的: 解决多个线程对全局变量的无序的使用带来额数据错误

   * Lock()  acquire()  release()
     Event()  e.wait()  e.set()  e.clear()

   * 死锁 : 线程的执行阻塞,且没有外界参与时阻塞一直持续

3. GIL (全局解释器锁)

   直接后果 : c解释器同一时刻只能解释一个线程

   效率后果 : python线程效率低

   结论 : 在高阻塞,多延迟可以使用线程,但是其他情况下不要用线程执行多任务

4. 进程线程的区别和使用

练习 : 根据Thread多线程并发思想,编写基于Process的多进程并发

ftp 文件服务

1. 确定技术点
   * 并发模型 :  多线程并发
   * 数据传输网络 :  tcp 传输

2. 结构设计

   使用函数构建网络模型
   实用类封装主体功能(2,3,4)

3. 功能模块的划分
    * 搭建网络通信模型
    * 查看列表
    * 下载文件
    * 上传文件
    * 客户端退出

4. 请求类型和请求协议

   * 查看列表     LIST
   * 下载文件     GET  filename
   * 上传文件     PUT  filename
   * 客户端退出   EXIT

5. 每个功能逻辑

    * 搭建网络通信模型
    * 查看列表
         客户端 :  发请求 -> 得到反馈-> 接收文件列表
         服务端 :  接收请求 -> 给客户端反馈 -> 发送文件列表

    * 上传文件 (如果文件库中有重名文件则不允许上传覆盖)

    * 下载文件

    * 客户端退出


作业 : 1. 整理ftp代码
      2. fork_server,thread_server 自己会写
      3. 搞定位运算



