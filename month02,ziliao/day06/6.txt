前情回顾

1. struct模块

2. HTTP协议

   应用层  用于数据传输   tcp传输方式

   请求 ： 请求行  请求头  空行  请求体

        请求行：  请求类型  请求内容   协议版本

   响应 ： 响应行  响应头  空行  响应体

        响应行 ： 协议版本  响应码  附加信息
        响应体 ： 数据

3. 进程

   进程： 程序的执行过程

   * 进程状态
   * 进程概念

4. os.fork()

=======================================

聊天室思路分析

1. 需求分析 ：  达到什么效果

2. 技术点分析

   * 使用网络 ： 数据报套接字
   * 请求和响应模型： 客户端 --> 服务端 --> 数据处理
   * 如何记录用户信息:  {name:address}
                     [(name,address),...]
                     class Person:
                        def __init__(self,name,address):
                            self.name = name
                            self.address = address
   * 多进程 ： 一个进程控制发送
              一个进程控制接收

3. 结构的设计和协议的设计

   * 网络通信搭建
   * 进入聊天室
   * 聊天
   * 退出聊天室
   * 管理员消息

   封装方法： 函数封装

   协议设计:
        进入聊天室 ：  L name
        反馈： 服务端发送 OK  其他的为失败

        聊天 ：       C name content

        退出 ：       E name

4. 逐个功能分析，列出逻辑流程

   * 网络通信搭建
   * 进入聊天室
     客户端： 1. 输入姓名
             2. 发送请求
             3. 接收结果 （成功，失败）

     服务端： 1. 接收请求 （请求类型区分）
             2. 判断名字是否重复
             3. 将结果返回给客户端
             4. 如果允许进入 --》 告知其他客户端

   * 聊天
       客户端： 创建新的进程
               一个进程收消息
               一个进程发消息

       服务端：  接收请求 （请求类型区分）
                转发给其他人

   * 退出聊天室 （输入##或者ctrl-c表示退出）

       客户端： 输入退出标志
               发送请求
               进程结束

       服务端： 接收请求 （请求类型区分）
               告知其他人
               将用户从user中删除

   * 管理员消息

作业： 1. 聊天室代码自己梳理
      2. 使用Process方法，创建两个子进程去同时复制一个文件的上
      半部分和下半部分，并分别写入到一个新的文件中。

       获取文件大小： os.path.getsize()














